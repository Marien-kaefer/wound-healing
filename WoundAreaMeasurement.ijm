/*
Macro to measure the wound area in a scratch assay. The input is an open stack containing segmentation masks generated
in Ilastik for the whole time series. The script applies some smoothing to the segmentation masks. The results table that is generated contains the following calculated parameters: 
-	Area (px^2)	
-	Area Fraction (%)	
-	Area normalised to first image (%)	
-	Area decrease compared to first image (px^2)
The results table should be saved prior to running the script on another stack. 


												- Written by Marie Held [mheldb@liverpool.ac.uk] January 2022
												  Liverpool CCI (https://cci.liverpool.ac.uk/)
MIT License
Copyright (c) [2022] [Marie Held {mheldb@liverpool.ac.uk}, Image Analyst Liverpool CCI (https://cci.liverpool.ac.uk/)]
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, 
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/


// generate result lists to be populated by the script
area = newArray;
areaFraction = newArray;
areaNormalisedToFirstImage = newArray;
areaDecreaseFromFirstImage = newArray;

run("Duplicate...", "duplicate");

//measure total area of field of view for normalisation
run("Select All");
run("Measure");
totalArea = getValue("Area");
run("Select None");

//set measurements to area
run("Set Measurements...", "area display redirect=None decimal=3");

//convert Ilastik segmentation masks from 32 bit to 8 bit
setOption("ScaleConversions", true);
run("8-bit");

// toggle this line if required by adding "//" 
run("Fill Holes", "stack");

run("Invert", "stack");
//smooth segmentation mask 
run("Dilate", "stack");

//loop through all time points of the time series. Measure wound area and calculate relative parameters.
for (i = 1; i<= 13; i++){
	setSlice(i);
	//print("Processing Slice " + i); // For troubleshooting only
	run("Analyze Particles...", "size=350-Infinity clear add slice");
	count = roiManager("count");
	//print("ROI count: " + count); // For troubleshooting only
	if(count == 0){
		areaValue = 0; 
	}
	else if (count == 1){
		roiManager("Select", count-1);
		roiManager("measure");
		areaValue = getValue("Area");		
	}
	else if (count >= 2){ 
		// combine multiple smaller ROIs to one large ROI
		roiManager("Combine");
		roiManager("Add");
		roiManager("Select", count);
		roiManager("Select", count);
		roiManager("measure");
		areaValue = getValue("Area");
	}
	//print("Area: " + areaValue); // For troubleshooting only
	area[i] = areaValue; 
	areaFraction[i] = areaValue / totalArea * 100;
	areaNormalisedToFirstImage[i] = (1- (area[1] - areaValue) / area[1]) * 100;
	areaDecreaseFromFirstImage[i] = area[1] - area[i];
	if (count > 0){
		roiManager("Deselect");
		roiManager("Delete");
		roiManager("reset"); 
		run("Select None");
	}
}

// For trouble shooting only. Remove "/*" and "*/" to activate the four lines printing the populated result lists generated by the script. The lists will be printed into the log window.  
/*
Array.print(area); 
Array.print(areaFraction); 
Array.print(areaNormalisedToFirstImage); 
Array.print(areaDecreaseFromFirstImage); 
*/

// Generate new table from results lists for display and data saving purposes. 
Table.create("Results Table");
// set four new columns
Table.setColumn("Area (px^2)", area);
Table.setColumn("Area Fraction (%)", areaFraction);
Table.setColumn("Area normalised to first image (%)", areaNormalisedToFirstImage);
Table.setColumn("Area decrease compared to first image (px^2)", areaDecreaseFromFirstImage);
Table.deleteRows(0, 0);

//clean up
    if (isOpen("Results")) {
         selectWindow("Results"); 
         run("Close" );
    {